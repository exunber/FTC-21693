package org.firstinspires.ftc.teamcode.mechanics;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name="TeleOP_ver_1", group="Linear OpMode")
public class TeleOP_ver_1 extends LinearOpMode {

    // Declare OpMode members for each of the 4 motors.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor fl = null;
    private DcMotor bl = null;
    private DcMotor fr = null;
    private DcMotor br = null;

    @Override
    public void runOpMode() {

        // Initialize the hardware variables
        fl = hardwareMap.get(DcMotor.class, "fl");
        bl = hardwareMap.get(DcMotor.class, "bl");
        fr = hardwareMap.get(DcMotor.class, "fr");
        br = hardwareMap.get(DcMotor.class, "br");

        // Set motor directions
        fl.setDirection(DcMotor.Direction.REVERSE);
        bl.setDirection(DcMotor.Direction.REVERSE);
        fr.setDirection(DcMotor.Direction.FORWARD);
        br.setDirection(DcMotor.Direction.FORWARD);

        // Wait for the game to start
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        waitForStart();
        runtime.reset();

        // Run until the end of the match
        while (opModeIsActive()) {
            double max;

            // Get joystick inputs
            double axial   = -gamepad1.left_stick_y * .4;  // Forward/backward +=forward
            double lateral =  gamepad1.left_stick_x * .4;  // Left/right += move right
            double yaw     =  gamepad1.right_stick_x * .4; // Rotation += turn right

            // Calculate wheel powers based on joystick inputs
            double flPower  = axial + lateral + yaw;
            double frPower  = axial - lateral - yaw;
            double blPower  = axial - lateral + yaw;
            double brPower  = axial + lateral - yaw;

            // Normalize the values so no wheel power exceeds 100%
            max = Math.max(Math.abs(flPower), Math.abs(frPower));
            max = Math.max(max, Math.abs(blPower));
            max = Math.max(max, Math.abs(brPower));

            if (max > 1.0) {
                flPower  /= max;
                frPower  /= max;
                blPower  /= max;
                brPower  /= max;
            }

            // Set the motor powers
            fl.setPower(flPower);
            fr.setPower(frPower);
            bl.setPower(blPower);
            br.setPower(brPower);

            // Show telemetry data
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Front left/Right", "%4.2f, %4.2f", flPower, frPower);
            telemetry.addData("Back left/Right", "%4.2f, %4.2f", blPower, brPower);
            telemetry.update();
        }
    }
}
